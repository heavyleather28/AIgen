@Configuration
public class WebClientConfig {

    @Bean
    public WebClient webClient() {
        HttpClient httpClient = HttpClient.create()
            .responseTimeout(Duration.ofSeconds(30))          // 響應超時
            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000) // 連線超時 5秒
            .secure(spec -> spec.sslContext(
                SslContextBuilder.forClient()
                    .trustManager(InsecureTrustManagerFactory.INSTANCE)
                    .build()
            ));

        return WebClient.builder()
            .clientConnector(new ReactorClientHttpConnector(httpClient))
            .build();
    }
}
使用方式 (加上讀取超時)
java@Service
public class ApiService {
    
    private final WebClient webClient;
    
    public ApiService(WebClient webClient) {
        this.webClient = webClient;
    }
    
    public String callApi() {
        return webClient.get()
            .uri("https://self-signed-ssl-site.com/api/data")
            .retrieve()
            .bodyToMono(String.class)
            .timeout(Duration.ofSeconds(10))  // 整個請求超時 10秒
            .block();
    }
}
懶人一次性版本
java@RestController
public class TestController {
    
    @GetMapping("/test")
    public String test() {
        HttpClient httpClient = HttpClient.create()
            .responseTimeout(Duration.ofSeconds(30))
            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)
            .secure(spec -> spec.sslContext(
                SslContextBuilder.forClient()
                    .trustManager(InsecureTrustManagerFactory.INSTANCE)
                    .build()));

        WebClient client = WebClient.builder()
            .clientConnector(new ReactorClientHttpConnector(httpClient))
            .build();
            
        return client.get()
            .uri("https://your-ssl-site.com/api")
            .retrieve()
            .bodyToMono(String.class)
            .timeout(Duration.ofSeconds(10))  // 請求層級超時
            .block();
    }
}