/* 權限管理 Excel 處理專案
excel-processor/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── excelprocessor/
│   │   │               ├── ExcelProcessorApplication.java
│   │   │               ├── controller/
│   │   │               │   └── PermissionExcelController.java
│   │   │               ├── service/
│   │   │               │   └── PermissionExcelService.java
│   │   │               ├── model/
│   │   │               │   ├── PermissionData.java
│   │   │               │   └── SqlGenerationResult.java
│   │   │               └── util/
│   │   │                   └── SqlGenerator.java
│   │   └── resources/
│   │       ├── templates/
│   │       │   ├── upload.html
│   │       │   └── result.html
│   │       ├── static/
│   │       │   └── css/
│   │       │       └── main.css
│   │       └── application.yml
└── pom.xml
*/

// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    <groupId>com.example</groupId>
    <artifactId>permission-excel-processor</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>permission-excel-processor</name>
    <description>權限管理 Excel 處理系統</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Excel 處理相關依賴 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>5.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.4</version>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/excelprocessor/ExcelProcessorApplication.java
package com.example.excelprocessor;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ExcelProcessorApplication {
    public static void main(String[] args) {
        SpringApplication.run(ExcelProcessorApplication.class, args);
    }
}

// src/main/java/com/example/excelprocessor/model/PermissionData.java
package com.example.excelprocessor.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PermissionData {
    private String action;           // 新增/刪除
    private String systemCode;       // 應用系統代號
    private String roleCode;         // 角色代碼
    private String functionName;     // 功能名稱
    private String permissionName;   // 權限名稱
    private String functionCategory; // 功能分類
    private int rowNumber;           // Excel 行號，用於錯誤追蹤
    
    // 檢查是否為 TING-INGENIUM 系統
    public boolean isTingIngeniumSystem() {
        return "TING-INGENIUM".equalsIgnoreCase(this.systemCode);
    }
    
    // 檢查資料是否完整（功能名稱和功能分類不為空）
    public boolean isDataComplete() {
        return functionName != null && !functionName.trim().isEmpty() &&
               functionCategory != null && !functionCategory.trim().isEmpty();
    }
}

// src/main/java/com/example/excelprocessor/model/SqlGenerationResult.java
package com.example.excelprocessor.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SqlGenerationResult {
    private List<String> insertStatements;
    private List<String> deleteStatements;
    private int totalProcessed;
    private int filteredCount;
    private int validDataCount;
    private List<String> errorMessages;
    private String fileName;
}

// src/main/java/com/example/excelprocessor/service/PermissionExcelService.java
package com.example.excelprocessor.service;

import com.example.excelprocessor.model.PermissionData;
import com.example.excelprocessor.model.SqlGenerationResult;
import com.example.excelprocessor.util.SqlGenerator;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class PermissionExcelService {

    private static final String TARGET_SYSTEM = "TING-INGENIUM";
    private static final int HEADER_ROW = 0; // 假設第一行是標題
    
    // Excel 欄位索引 (根據您的 Excel 結構調整)
    private static final int COL_ACTION = 0;           // 新增/刪除
    private static final int COL_SYSTEM_CODE = 2;      // 應用系統代號
    private static final int COL_ROLE_CODE = 3;        // 角色代碼
    private static final int COL_FUNCTION_NAME = 4;    // 功能名稱
    private static final int COL_PERMISSION_NAME = 5;  // 權限名稱
    private static final int COL_FUNCTION_CATEGORY = 6; // 功能分類

    public SqlGenerationResult processExcelFile(MultipartFile file) throws IOException {
        List<PermissionData> allData = new ArrayList<>();
        List<String> errorMessages = new ArrayList<>();
        
        try (InputStream inputStream = file.getInputStream()) {
            Workbook workbook = getWorkbook(inputStream, file.getOriginalFilename());
            Sheet sheet = workbook.getSheetAt(0);
            
            Iterator<Row> rowIterator = sheet.iterator();
            int rowNumber = 0;
            
            // 跳過標題行
            if (rowIterator.hasNext()) {
                rowIterator.next();
                rowNumber++;
            }
            
            // 讀取每一行資料
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                rowNumber++;
                
                try {
                    PermissionData data = parseRowToPermissionData(row, rowNumber);
                    if (data != null) {
                        allData.add(data);
                    }
                } catch (Exception e) {
                    errorMessages.add(String.format("第 %d 行資料解析錯誤: %s", rowNumber, e.getMessage()));
                }
            }
            
            workbook.close();
        }
        
        // 篩選 TING-INGENIUM 系統的資料
        List<PermissionData> filteredData = allData.stream()
                .filter(PermissionData::isTingIngeniumSystem)
                .collect(Collectors.toList());
        
        // 進一步篩選有效資料（功能名稱和功能分類不為空）
        List<PermissionData> validData = filteredData.stream()
                .filter(PermissionData::isDataComplete)
                .collect(Collectors.toList());
        
        // 添加無效資料的錯誤訊息
        filteredData.stream()
                .filter(data -> !data.isDataComplete())
                .forEach(data -> errorMessages.add(
                    String.format("第 %d 行: 功能名稱或功能分類為空", data.getRowNumber())
                ));
        
        // 生成 SQL 語句
        SqlGenerator sqlGenerator = new SqlGenerator();
        List<String> insertStatements = sqlGenerator.generateInsertStatements(validData);
        List<String> deleteStatements = sqlGenerator.generateDeleteStatements(validData);
        
        return new SqlGenerationResult(
                insertStatements,
                deleteStatements,
                allData.size(),
                filteredData.size(),
                validData.size(),
                errorMessages,
                file.getOriginalFilename()
        );
    }
    
    private PermissionData parseRowToPermissionData(Row row, int rowNumber) {
        // 檢查行是否為空
        if (isRowEmpty(row)) {
            return null;
        }
        
        PermissionData data = new PermissionData();
        data.setRowNumber(rowNumber);
        
        data.setAction(getCellValueAsString(row.getCell(COL_ACTION)));
        data.setSystemCode(getCellValueAsString(row.getCell(COL_SYSTEM_CODE)));
        data.setRoleCode(getCellValueAsString(row.getCell(COL_ROLE_CODE)));
        data.setFunctionName(getCellValueAsString(row.getCell(COL_FUNCTION_NAME)));
        data.setPermissionName(getCellValueAsString(row.getCell(COL_PERMISSION_NAME)));
        data.setFunctionCategory(getCellValueAsString(row.getCell(COL_FUNCTION_CATEGORY)));
        
        return data;
    }
    
    private boolean isRowEmpty(Row row) {
        if (row == null) return true;
        
        for (int i = row.getFirstCellNum(); i < row.getLastCellNum(); i++) {
            Cell cell = row.getCell(i);
            if (cell != null && cell.getCellType() != CellType.BLANK) {
                String cellValue = getCellValueAsString(cell);
                if (cellValue != null && !cellValue.trim().isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }
    
    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getLocalDateTimeCellValue().toString();
                } else {
                    // 處理數字格式，避免科學記號
                    double numericValue = cell.getNumericCellValue();
                    if (numericValue == Math.floor(numericValue)) {
                        return String.valueOf((long) numericValue);
                    } else {
                        return String.valueOf(numericValue);
                    }
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            case BLANK:
                return "";
            default:
                return "";
        }
    }
    
    private Workbook getWorkbook(InputStream inputStream, String fileName) throws IOException {
        if (fileName.endsWith(".xlsx")) {
            return new XSSFWorkbook(inputStream);
        } else if (fileName.endsWith(".xls")) {
            return new HSSFWorkbook(inputStream);
        } else {
            throw new IllegalArgumentException("不支援的檔案格式，請上傳 .xls 或 .xlsx 檔案");
        }
    }
}

// src/main/java/com/example/excelprocessor/util/SqlGenerator.java
package com.example.excelprocessor.util;

import com.example.excelprocessor.model.PermissionData;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class SqlGenerator {
    
    public List<String> generateInsertStatements(List<PermissionData> permissionDataList) {
        return permissionDataList.stream()
                .filter(data -> "新增".equals(data.getAction()))
                .map(this::createInsertStatement)
                .collect(Collectors.toList());
    }
    
    public List<String> generateDeleteStatements(List<PermissionData> permissionDataList) {
        return permissionDataList.stream()
                .filter(data -> "刪除".equals(data.getAction()))
                .map(this::createDeleteStatement)
                .collect(Collectors.toList());
    }
    
    private String createInsertStatement(PermissionData data) {
        // 轉義單引號以防止 SQL 注入
        String functionName = escapeSqlString(data.getFunctionName());
        String functionCategory = escapeSqlString(data.getFunctionCategory());
        
        return String.format("INSERT INTO TBPFS VALUES ('T1', '%s', '%s');", 
                functionName, functionCategory);
    }
    
    private String createDeleteStatement(PermissionData data) {
        // 為刪除操作創建對應的 DELETE 語句
        String functionName = escapeSqlString(data.getFunctionName());
        String functionCategory = escapeSqlString(data.getFunctionCategory());
        
        return String.format("DELETE FROM TBPFS WHERE COL1 = 'T1' AND COL2 = '%s' AND COL3 = '%s';", 
                functionName, functionCategory);
    }
    
    /**
     * 轉義 SQL 字串中的單引號
     */
    private String escapeSqlString(String input) {
        if (input == null) {
            return "";
        }
        return input.replace("'", "''");
    }
}

// src/main/java/com/example/excelprocessor/controller/PermissionExcelController.java
package com.example.excelprocessor.controller;

import com.example.excelprocessor.model.SqlGenerationResult;
import com.example.excelprocessor.service.PermissionExcelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;

@Controller
public class PermissionExcelController {

    private final PermissionExcelService permissionExcelService;

    @Autowired
    public PermissionExcelController(PermissionExcelService permissionExcelService) {
        this.permissionExcelService = permissionExcelService;
    }

    @GetMapping("/")
    public String home() {
        return "upload";
    }

    @PostMapping("/upload")
    public String uploadFile(@RequestParam("file") MultipartFile file, 
                             RedirectAttributes redirectAttributes,
                             Model model,
                             HttpSession session) {
        
        // 檢查檔案是否為空
        if (file.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "請選擇要上傳的檔案");
            return "redirect:/";
        }
        
        // 檢查檔案格式
        String fileName = file.getOriginalFilename();
        if (fileName == null || !(fileName.toLowerCase().endsWith(".xls") || fileName.toLowerCase().endsWith(".xlsx"))) {
            redirectAttributes.addFlashAttribute("error", "請上傳 Excel 檔案 (.xls 或 .xlsx)");
            return "redirect:/";
        }
        
        try {
            // 處理 Excel 檔案並生成 SQL
            SqlGenerationResult result = permissionExcelService.processExcelFile(file);
            
            // 將結果存到 session 中，用於下載
            session.setAttribute("sqlResult", result);
            
            // 將結果傳遞到頁面
            model.addAttribute("result", result);
            
            return "result";
        } catch (IOException e) {
            redirectAttributes.addFlashAttribute("error", "處理檔案時發生錯誤: " + e.getMessage());
            return "redirect:/";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "系統錯誤: " + e.getMessage());
            return "redirect:/";
        }
    }
    
    @GetMapping("/download/sql")
    public ResponseEntity<ByteArrayResource> downloadSqlFile(HttpSession session) {
        SqlGenerationResult result = (SqlGenerationResult) session.getAttribute("sqlResult");
        
        if (result == null) {
            return ResponseEntity.notFound().build();
        }
        
        // 生成 SQL 檔案內容
        StringBuilder sqlContent = new StringBuilder();
        
        // 添加檔案頭部註釋
        sqlContent.append("-- ========================================\n");
        sqlContent.append("-- 權限管理系統 SQL 語句\n");
        sqlContent.append("-- 來源檔案: ").append(result.getFileName()).append("\n");
        sqlContent.append("-- 生成時間: ").append(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())).append("\n");
        sqlContent.append("-- 總處理筆數: ").append(result.getTotalProcessed()).append("\n");
        sqlContent.append("-- TING-INGENIUM 筆數: ").append(result.getFilteredCount()).append("\n");
        sqlContent.append("-- 有效資料筆數: ").append(result.getValidDataCount()).append("\n");
        sqlContent.append("-- ========================================\n\n");
        
        // 添加 INSERT 語句
        if (!result.getInsertStatements().isEmpty()) {
            sqlContent.append("-- INSERT 語句 (新增操作)\n");
            sqlContent.append("-- 共 ").append(result.getInsertStatements().size()).append(" 筆\n");
            sqlContent.append("-- ========================================\n\n");
            
            for (String insertSql : result.getInsertStatements()) {
                sqlContent.append(insertSql).append("\n");
            }
            sqlContent.append("\n");
        }
        
        // 添加 DELETE 語句
        if (!result.getDeleteStatements().isEmpty()) {
            sqlContent.append("-- DELETE 語句 (刪除操作)\n");
            sqlContent.append("-- 共 ").append(result.getDeleteStatements().size()).append(" 筆\n");
            sqlContent.append("-- ========================================\n\n");
            
            for (String deleteSql : result.getDeleteStatements()) {
                sqlContent.append(deleteSql).append("\n");
            }
            sqlContent.append("\n");
        }
        
        // 添加錯誤訊息
        if (!result.getErrorMessages().isEmpty()) {
            sqlContent.append("-- 處理警告訊息\n");
            sqlContent.append("-- ========================================\n");
            for (String errorMsg : result.getErrorMessages()) {
                sqlContent.append("-- ").append(errorMsg).append("\n");
            }
            sqlContent.append("\n");
        }
        
        sqlContent.append("-- 檔案結束\n");
        
        // 建立檔案名稱
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String downloadFileName = String.format("TING_INGENIUM_SQL_%s.sql", timestamp);
        
        // 轉換為 ByteArrayResource
        byte[] sqlBytes = sqlContent.toString().getBytes(StandardCharsets.UTF_8);
        ByteArrayResource resource = new ByteArrayResource(sqlBytes);
        
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + downloadFileName + "\"")
                .contentType(MediaType.parseMediaType("application/sql"))
                .contentLength(sqlBytes.length)
                .body(resource);
    }
}

// src/main/resources/templates/upload.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>權限管理 Excel 處理系統</title>
    <link rel="stylesheet" th:href="@{/css/main.css}">
</head>
<body>
    <div class="container">
        <header>
            <h1>🔐 權限管理 Excel 處理系統</h1>
            <p class="subtitle">專門處理 TING-INGENIUM 系統權限資料並生成 SQL 語句</p>
        </header>
        
        <div th:if="${error}" class="alert alert-error">
            <strong>錯誤:</strong> <span th:text="${error}"></span>
        </div>
        
        <div class="upload-card">
            <div class="upload-info">
                <h2>📋 Excel 檔案格式說明</h2>
                <div class="info-grid">
                    <div class="info-item">
                        <strong>支援格式:</strong> .xls, .xlsx
                    </div>
                    <div class="info-item">
                        <strong>處理條件:</strong> 僅處理「應用系統代號」= TING-INGENIUM 的資料
                    </div>
                    <div class="info-item">
                        <strong>必要欄位:</strong> 新增/刪除、應用系統代號、角色代碼、功能名稱、權限名稱、功能分類
                    </div>
                    <div class="info-item">
                        <strong>輸出格式:</strong> INSERT INTO TBPFS ('T1', 功能名稱, 功能分類)
                    </div>
                </div>
            </div>
            
            <div class="upload-section">
                <h2>📤 上傳 Excel 檔案</h2>
                <form method="POST" th:action="@{/upload}" enctype="multipart/form-data" class="upload-form">
                    <div class="file-input-wrapper">
                        <input type="file" name="file" id="file" accept=".xls,.xlsx" required class="file-input">
                        <label for="file" class="file-label">
                            <span class="file-icon">📁</span>
                            <span class="file-text">選擇 Excel 檔案</span>
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <span>🚀 開始處理</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        // 檔案選擇提示
        document.getElementById('file').addEventListener('change', function(e) {
            const fileName = e.target.files[0]?.name;
            const fileText = document.querySelector('.file-text');
            if (fileName) {
                fileText.textContent = fileName;
            } else {
                fileText.textContent = '選擇 Excel 檔案';
            }
        });
    </script>
</body>
</html>

// src/main/resources/templates/result.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>處理結果 - 權限管理 Excel 處理系統</title>
    <link rel="stylesheet" th:href="@{/css/main.css}">
</head>
<body>
    <div class="container">
        <header>
            <h1>📊 處理結果</h1>
            <p class="subtitle" th:text="'檔案: ' + ${result.fileName}"></p>
        </header>
        
        <!-- 統計資訊 -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" th:text="${result.totalProcessed}"></div>
                <div class="stat-label">總處理筆數</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" th:text="${result.filteredCount}"></div>
                <div class="stat-label">TING-INGENIUM 筆數</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" th:text="${result.validDataCount}"></div>
                <div class="stat-label">有效資料筆數</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" th:text="${result.insertStatements.size()}"></div>
                <div class="stat-label">INSERT 語句</div>
            </div>
        </div>
        
        <!-- 錯誤訊息 -->
        <div th:if="${!result.errorMessages.empty}" class="error-section">
            <h3>⚠️ 處理警告</h3>
            <div class="error-list">
                <div th:each="error : ${result.errorMessages}" class="error-item" th:text="${error}"></div>
            </div>
        </div>
        
        <!-- SQL 預覽和下載 -->
        <div th:if="${result.validDataCount > 0}" class="sql-section">
            <div class="section-header">
                <h3>📄 SQL 語句預覽</h3>
                <a th:href="@{/download/sql}" class="btn btn-download">📥 下載 SQL 檔案</a>
            </div>
            
            <div class="sql-preview">
                <!-- INSERT 語句預覽 -->
                <div th:if="${!result.insertStatements.empty}" class="sql-preview-section">
                    <h4>✅ INSERT 語句 (<span th:text="${result.insertStatements.size()}"></span> 筆)</h4>
                    <div class="sql-container">
                        <pre class="sql-content"><span th:each="sql, iterStat : ${result.insertStatements}"><span th:if="${iterStat.index < 5}" th:text="${sql}"></span><span th:if="${iterStat.index < 4 and !iterStat.last}">
</span></span><span th:if="${result.insertStatements.size() > 5}">
-- ... 省略其餘 <span th:text="${result.insertStatements.size() - 5}"></span> 筆，請下載完整 SQL 檔案</span></pre>
                    </div>
                </div>
                
                <!-- DELETE 語句預覽 -->
                <div th:if="${!result.deleteStatements.empty}" class="sql-preview-section">
                    <h4>🗑️ DELETE 語句 (<span th:text="${result.deleteStatements.size()}"></span> 筆)</h4>
                    <div class="sql-container">
                        <pre class="sql-content"><span th:each="sql, iterStat : ${result.deleteStatements}"><span th:if="${iterStat.index < 5}" th:text="${sql}"></span><span th:if="${iterStat.index < 4 and !iterStat.last}">
</span></span><span th:if="${result.deleteStatements.size() > 5}">
-- ... 省略其餘 <span th:text="${result.deleteStatements.size() - 5}"></span> 筆，請下載完整 SQL 檔案</span></pre>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 沒有資料的情況 -->
        <div th:if="${result.validDataCount == 0}" class="no-data-section">
            <div class="no-data-card">
                <h3>📭 沒有找到有效資料</h3>
                <p>請確認 Excel 檔案中包含「應用系統代號」為 TING-INGENIUM 的完整資料。</p>
            </div>
        </div>
        
        <div class="action-buttons">
            <a href="/" class="btn btn-secondary">🔄 重新上傳</a>
        </div>
    </div>
    
    <script>
        // 檔案選擇提示
        document.getElementById('file').addEventListener('change', function(e) {
            const fileName = e.target.files[0]?.name;
            const fileText = document.querySelector('.file-text');
            if (fileName) {
                fileText.textContent = fileName;
            } else {
                fileText.textContent = '選擇 Excel 檔案';
            }
        });
    </script>
</body>
</html>

// src/main/resources/static/css/main.css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    text-align: center;
    margin-bottom: 30px;
    color: white;
}

header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* 上傳頁面樣式 */
.upload-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    overflow: hidden;
    margin-bottom: 30px;
}

.upload-info {
    background: #f8f9fa;
    padding: 30px;
    border-bottom: 1px solid #e9ecef;
}

.upload-info h2 {
    color: #495057;
    margin-bottom: 20px;
    font-size: 1.4rem;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
}

.info-item {
    background: white;
    padding: 15px;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.info-item strong {
    color: #495057;
    display: block;
    margin-bottom: 5px;
}

.upload-section {
    padding: 30px;
}

.upload-section h2 {
    color: #495057;
    margin-bottom: 25px;
    font-size: 1.4rem;
}

.upload-form {
    text-align: center;
}

.file-input-wrapper {
    position: relative;
    display: inline-block;
    margin-bottom: 20px;
}

.file-input {
    position: absolute;
    left: -9999px;
}

.file-label {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 15px 30px;
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
}

.file-label:hover {
    background: #e9ecef;
    border-color: #667eea;
    transform: translateY(-2px);
}

.file-icon {
    font-size: 1.5rem;
}

/*