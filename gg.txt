/* 專案結構
excel-processor/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── excelprocessor/
│   │   │               ├── ExcelProcessorApplication.java
│   │   │               ├── controller/
│   │   │               │   └── FileUploadController.java
│   │   │               ├── service/
│   │   │               │   └── ExcelService.java
│   │   │               └── model/
│   │   │                   └── ExcelData.java
│   │   └── resources/
│   │       ├── templates/
│   │       │   ├── upload.html
│   │       │   └── result.html
│   │       ├── static/
│   │       │   └── css/
│   │       │       └── main.css
│   │       └── application.properties
└── pom.xml
*/

// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>excel-processor</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>excel-processor</name>
    <description>Spring Boot application for processing Excel files</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Excel 處理相關依賴 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>5.2.3</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.3</version>
        </dependency>
        
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/excelprocessor/ExcelProcessorApplication.java
package com.example.excelprocessor;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ExcelProcessorApplication {

    public static void main(String[] args) {
        SpringApplication.run(ExcelProcessorApplication.class, args);
    }
}

// src/main/java/com/example/excelprocessor/model/ExcelData.java
package com.example.excelprocessor.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ExcelData {
    private String column1;
    private String column2;
    private String column3;
    // 依照您的 Excel 資料結構調整欄位
}

// src/main/java/com/example/excelprocessor/service/ExcelService.java
package com.example.excelprocessor.service;

import com.example.excelprocessor.model.ExcelData;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {

    public List<ExcelData> processExcelFile(MultipartFile file) throws IOException {
        List<ExcelData> dataList = new ArrayList<>();
        
        try (InputStream inputStream = file.getInputStream()) {
            Workbook workbook = getWorkbook(inputStream, file.getOriginalFilename());
            Sheet sheet = workbook.getSheetAt(0); // 取得第一個工作表
            
            Iterator<Row> rowIterator = sheet.iterator();
            
            // 跳過標題行
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }
            
            // 讀取每一行資料
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                ExcelData data = new ExcelData();
                
                data.setColumn1(getCellValueAsString(row.getCell(0)));
                data.setColumn2(getCellValueAsString(row.getCell(1)));
                data.setColumn3(getCellValueAsString(row.getCell(2)));
                // 依照您的 Excel 資料結構調整
                
                dataList.add(data);
            }
            
            workbook.close();
        }
        
        return dataList;
    }
    
    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getLocalDateTimeCellValue().toString();
                } else {
                    return String.valueOf(cell.getNumericCellValue());
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            default:
                return "";
        }
    }
    
    private Workbook getWorkbook(InputStream inputStream, String fileName) throws IOException {
        if (fileName.endsWith(".xlsx")) {
            return new XSSFWorkbook(inputStream); // Excel 2007+
        } else if (fileName.endsWith(".xls")) {
            return new HSSFWorkbook(inputStream); // Excel 97-2003
        } else {
            throw new IllegalArgumentException("檔案不是 Excel 格式!");
        }
    }
}

// src/main/java/com/example/excelprocessor/controller/FileUploadController.java
package com.example.excelprocessor.controller;

import com.example.excelprocessor.model.ExcelData;
import com.example.excelprocessor.service.ExcelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;
import java.util.List;

@Controller
public class FileUploadController {

    private final ExcelService excelService;

    @Autowired
    public FileUploadController(ExcelService excelService) {
        this.excelService = excelService;
    }

    @GetMapping("/")
    public String home() {
        return "upload";
    }

    @PostMapping("/upload")
    public String uploadFile(@RequestParam("file") MultipartFile file, 
                             RedirectAttributes redirectAttributes,
                             Model model) {
        
        // 檢查檔案是否為空
        if (file.isEmpty()) {
            redirectAttributes.addFlashAttribute("message", "請選擇要上傳的檔案");
            return "redirect:/";
        }
        
        // 檢查檔案格式
        String fileName = file.getOriginalFilename();
        if (fileName != null && !(fileName.endsWith(".xls") || fileName.endsWith(".xlsx"))) {
            redirectAttributes.addFlashAttribute("message", "請上傳 Excel 檔案 (.xls 或 .xlsx)");
            return "redirect:/";
        }
        
        try {
            // 處理 Excel 檔案
            List<ExcelData> excelDataList = excelService.processExcelFile(file);
            
            // 將資料傳遞到結果頁面
            model.addAttribute("excelDataList", excelDataList);
            model.addAttribute("fileName", fileName);
            
            return "result";
        } catch (IOException e) {
            redirectAttributes.addFlashAttribute("message", "處理檔案時發生錯誤: " + e.getMessage());
            return "redirect:/";
        }
    }
}

// src/main/resources/templates/upload.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Excel 檔案上傳</title>
    <link rel="stylesheet" th:href="@{/css/main.css}">
</head>
<body>
    <div class="container">
        <h1>Excel 檔案上傳處理系統</h1>
        
        <div th:if="${message}" class="alert" th:text="${message}"></div>
        
        <div class="card">
            <h2>請選擇 Excel 檔案上傳</h2>
            <form method="POST" th:action="@{/upload}" enctype="multipart/form-data">
                <div class="form-group">
                    <input type="file" name="file" accept=".xls,.xlsx" required>
                </div>
                <button type="submit" class="btn">上傳檔案</button>
            </form>
        </div>
    </div>
</body>
</html>

// src/main/resources/templates/result.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Excel 處理結果</title>
    <link rel="stylesheet" th:href="@{/css/main.css}">
</head>
<body>
    <div class="container">
        <h1>Excel 處理結果</h1>
        
        <div class="card">
            <h2 th:text="'檔案名稱: ' + ${fileName}"></h2>
            
            <div th:if="${excelDataList.empty}">
                <p>沒有找到資料</p>
            </div>
            
            <div th:unless="${excelDataList.empty}">
                <p th:text="'共處理 ' + ${excelDataList.size()} + ' 筆資料'"></p>
                
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>欄位 1</th>
                            <th>欄位 2</th>
                            <th>欄位 3</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr th:each="data : ${excelDataList}">
                            <td th:text="${data.column1}"></td>
                            <td th:text="${data.column2}"></td>
                            <td th:text="${data.column3}"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <a href="/" class="btn">返回上傳頁面</a>
        </div>
    </div>
</body>
</html>

// src/main/resources/static/css/main.css
body {
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    color: #333;
}

.container {
    width: 80%;
    margin: 30px auto;
    overflow: auto;
}

h1 {
    text-align: center;
    margin-bottom: 20px;
    color: #444;
}

.card {
    background: #fff;
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.form-group {
    margin-bottom: 15px;
}

.btn {
    display: inline-block;
    background: #007bff;
    color: #fff;
    border: none;
    padding: 10px 20px;
    margin: 10px 0;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    font-size: 16px;
}

.btn:hover {
    background: #0069d9;
}

.alert {
    background: #f8d7da;
    padding: 10px;
    margin-bottom: 20px;
    border-radius: 5px;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.data-table th, .data-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.data-table th {
    background-color: #f2f2f2;
    font-weight: bold;
}

.data-table tr:hover {
    background-color: #f9f9f9;
}

// src/main/resources/application.properties
# 伺服器埠號
server.port=8080

# 上傳檔案大小限制
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Thymeleaf 設定
spring.thymeleaf.cache=false